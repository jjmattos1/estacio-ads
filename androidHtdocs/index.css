/*
comentário

Comment hotkey in VS Code:
Windows = shift+alt+a
Linux = Shift+ctrl+a

*/

body  { background-color:lightblue; }
h1  { color: navy; margin-left: 20px; }
p  { color: red; text-align: center; }

table {
    font-family: Arial, Helvetica, sans-serif;
    width: 100%;
}
td, th {
    border: 1px solid #dddddd; text-align: left;
    padding: 8px;
}
tr:nth-child(even) {
    background-color: #dddddd;
}

bottom1 {
  text-align: center;
}

.negrito  { font-weight: bold;}
.negrito::after {content: "[*]";}
p::first-letter { font-size: 200%; color: #8a2be2; }

div:hover { background-color: #000000; color: #8a2be2 ;}
div { width: 100px; height: 100px; align-content: center; border: 3px outset white;}
#d1 { position: fixed; top: 425px; left: 425; background-color: yellow ;}
#d2 { position: fixed; top: 475px; left: 475px; background-color: orange; }
#c1 { position: absolute; top: 600px; left: 200px; background-color: blue; }


video {
  height: 100vh;
  width: 100%;
  object-fit: cover; /* other option is "fill" */
  /* position: sticky; */ /* test other positions later. The "absolute" didnt work good, because if it the video was over other elements on the page */
  /* the static position ignores any other css configuration */
}

/* 
CSS Selectors examples

body       Specify a style for a specific tag.
.xpto      Class xpto. You need to put the 'class=".xpto"' parameter in the tag, so it can use this style.
#layer1    identificators. You'll have to use the 'id="idname"' parameter inside the tag, so this style will be applied to it.
h1, h2     Multiple tags using the same style.
a:hover   Pseudo element. In this example, when the mouse go over the <a> tag, it'll apply this current style.

Background
Estabiliza o fundo de elementos. Para tal há uma série de propriedades, além do atalho “Background”, como “background-color”, “background-image” etc.
Border
  Controla as bordas de um elemento, sendo possível definir suas cores, espessuras, entre outras propriedades.
Top, Bottom, Righ e Left
  Controlam o posicionamento, relativo ou absoluto, dos elementos em relação a outros elementos. Color Estila a cor do conteúdo textual de um elemento.
Font-family, Font-size, Font-weight etc.
  Série de propriedades usada para estilizar o conteúdo textual de um elemento no que diz respeito à fonte, como a família de fontes, seu tamanho, peso (mais clara ou mais escura - negrito) etc.
Height
  Define a altura de um elemento.
List-style, List-styleimage etc.
    Propriedades usadas para estilizar as listas HTML. Margin Controla a distância em função da margem de um elemento para outro. Padding Controla a distância entre as bordas e o conteúdo de um elemento. Position Define como um elemento deve ser posicionado na página. Text-...
     Muitas propriedades controlam o comportamento do conteúdo textual de um elemento, como alinhamento (justificado, centralizado etc.), aparência (sublinhado etc.) etc.
Width
  Define a largura de um elemento. Z-index Define a profundidade de um elemento – usado, por exemplo, para sobreposição de elementos.
Nesse caso, os estilos são declarados em um arquivo externo, com extensão “.css” e vinculados ao documento HTML por meio da tag < link > ou da diretiva @import dentro da tag < head >
  Exemplos:
    <link rel="stylesheet" type="text/css" href="url/stylesheet.css" />
      * OU *
      <style>@import ("url/stylesheet.css");</style>
  Lembrando de que há essas maneiras de declarar/usar o CSS: inline (dentro da tag), interno (tudo declarado dentro do head sob a tag style), externo (link externk) e em escopo (dentro de uma tag principal, uma div por exemplo, se usa a tag style e faz toda declaração necessária dentro desta).
  
  Lembrar de que existe as regras de herança e precedência.

Entretanto, a utilização do valor !important, que se enquadra no que chamados de css hack, na declaração mais generalizada, faz com que esse estilo se sobreponha ao específico. Logo, o código acima resulta na apresentação do texto dentro da tag < p > na cor azul.
  Exemplo:
  p {
    color:blue!important;
  }
  div p {
    color: red;
  }
  No exemplo acima, o trecho da tag p "color:blue!important;" será renderizado ao inves do trecho da tag p "color: red;".
  Uso de Web Fonte (carregar fontes da internet no CSS), exemplo:
  @font-face {
    font-family: 'Awesome';
    font-style: normal;
    font-weight: 400;
    src: local('Awesome Font'),
    url ('/assets/fonts/awesome
woff2') format('woff2'),
    url ('//siteondeafonteestadisponivel/fontes/awesome.woff') format('woff'),
    url ('/assets/fonts/awesome
ttf') format('truetype'),
    url ('//siteondeafonteestadisponivel/fontes/awesome.eot') format('embedded-opentype');
  }
  
line

Pseudoclasses
  Example: div:hover{background-color:#000000;}
  Definition: the line above render a specific color on a div tag when the mouse hoves over that div.

Check other examples on "Linguagem de Marcação e Estilos - Css" PDF.

A seguir, três dos principais frameworks CSS existentes serão apresentados: Bootstrap, Foundation e Semantic UI.

Como utilizar o Bootstrap
Para utilizar o Bootstrap, é necessário incluir a sua biblioteca, composta por dois arquivos: um CSS e outro Javascript. Essa instalação é simples e pode ser feita pela inclusão dos respectivos arquivos diretamente na HTML.

Outra forma de instalação é por meio de ferramentas gerenciadoras de pacotes, como npm ou gem. Em termos de dependência, para a utilização completa de todas as suas funcionalidades, é necessário ainda incluir outras bibliotecas Javascript, a Jquery e a Popper.

Por último, é importante ter cuidado com as versões do framework em termos de compatibilidade, tanto em relação a bibliotecas de terceiros quanto em relação a funcionalidades em desuso/depreciadas.

To load Bootstrap directly via html:
  <link href="https://stackpath.bootstrapcdn.com/boostrap/4.5.0/css/bootstrap.min.css" rel="stylesheet">

Como utilizar o Foundation
A forma de utilização do Foundation é semelhante à do Bootstrap: é preciso incluir um arquivo CSS e outro Javascript ou então utilizar um gerenciador de pacotes. Além disso, é recomendado também incluir a Biblioteca jQuery.

A respeito da compatibilidade, aplica-se o que foi dito anteriormente: algumas funcionalidades são descontinuadas entre uma versão ou outra. Logo, é preciso tomar cuidado para que nada deixe de funcionar ao atualizar versões.

To load Foundation and Semantic UI directly via html:
  Foundation:
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.css">
  <script src="https://cdnjs.cloudlfare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/foundation.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.js"></script>

  <! -- Example for Foundation below -->

  Semantic UI:
  <link rel="stylesheet" href="https://cdnjs.cloudlfare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.js"></script>
  <script src="htps://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr 8BLUS jGIZsDYGmIJLvZb8=" crossorigin="anonymous"></script>


Comentário
Em termos de recursos extras, destaca-se nesse framework a existência de recursos específicos para a criação de HTML responsivo para e-mail. Trata-se do Foundation for Emails.

Como utilizar o Semantic UI
A sua inclusão é semelhante à dos demais frameworks vistos anteriormente, ou seja, por meio de arquivos CSS e JS, além da Biblioteca jQuery, ou via gerenciadores de pacotes.

Outros frameworks:

Pure > Considerado o framework mais leve, foi desenvolvido pela Yahoo.
Materialize CSS > Baseado no Material Design, ambos criados pelo Google e utilizados em seus produtos.
Bulma > Framework baseado unicamente em CSS, não faz uso de Javascript.
Skeleton > Framework minimalista. Possui apenas 400 linhas de código.

Search about usint flexbox css position, prof. Cople said that it works better on mobile devices because it's responsive.

Angular is a construction framework for the frontend. With it, you can use more that one framework (like Bootstrap and Foundation for example), and the Angular framework will be responsible about making the way/routes to use these other frameworks together.

material.io = design patterns
*/